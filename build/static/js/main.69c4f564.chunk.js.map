{"version":3,"sources":["components/Header/Header.module.sass","components/MainContent/MainContent.module.sass","components/SitesList/SitesList.module.sass","components/SitesList/SiteItem/SiteItem.module.sass","components/ClicksInfo/ClicksInfo.module.sass","components/ClicksInfo/Year/Year.module.sass","components/ClicksInfo/Month/Month.module.sass","components/ClicksInfo/Day/Day.module.sass","components/Header/Header.js","components/MainContent/MainContent.js","my_js_functions/app_consts.js","redux/getRequest/actionTypes.js","redux/getRequest/actions.js","my_js_functions/requests/fetch_get_redux.js","hoc/WithGetSites.js","containers/GetDataRequestRedux.js","components/SitesList/SiteItem/SiteItem.js","hoc/SitesList.js","components/SitesList/SitesList.js","my_js_functions/requests/fetch_post_redux.js","my_js_functions/requests/fetch_params_post.js","redux/postRequest/actions.js","redux/postRequest/actionTypes.js","hoc/WithPostClicks.js","containers/PostDataRequestRedux.js","components/ClicksInfo/Hour/Hour.js","components/ClicksInfo/Day/Day.js","components/ClicksInfo/Month/Month.js","components/ClicksInfo/Year/Year.js","hoc/ClicksInfo.js","components/ClicksInfo/ClicksInfo.js","components/Test/Test.js","hoc/MainContent.js","hoc/Services/Auxiliary.js","hoc/Layout/Layout.js","redux/getRequest/reducer.js","redux/postRequest/reducer.js","redux/rootReducer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","props","className","classes","Header","MainContent","children","host","SUCCESS","ERROR","LOADING","fetchGetData","url","dispatch","params","handleLoading","fetch","then","res","json","result","handleSuccess","json_response","error","handleError","Fetch_get","HandleSuccess","HandleError","HandleLoading","CreateFetchParams","type","payload","SitesList","GetDataRequest","this","loading","serverData","message","render","Component","connect","state","getRequest","siteName","siteId","SiteItem","to","WithGetSites","sitesList","map","siteItem","key","id","Fetch_post","Data","fetchParams","data","method","credentials","body","JSON","stringify","headers","fetchPostData","console","log","ClicksInfo","PostDataRequest","postRequest","hour","amount","Hour","hoursClicksInfo","day","Day","Object","keys","index","daysClicksInfo","month","Month","monthsClicksInfo","year","Year","WithPostClicks","clicksInfo","match","path","component","Test","Auxiliary","initialState","combineReducers","action","store","createStore","rootReducer","applyMiddleware","thunk","Layout","Boolean","window","location","hostname","application","App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.69c4f564.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__isxkV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainContent\":\"MainContent_MainContent__7Qja0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SitesList\":\"SitesList_SitesList__IARpX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SiteItem\":\"SiteItem_SiteItem__3atHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ClicksInfo\":\"ClicksInfo_ClicksInfo__1vxo1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Year\":\"Year_Year__5BQ2t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Month\":\"Month_Month__ZkQMh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Day\":\"Day_Day__8qEnO\"};","import React from 'react';\r\nimport classes from './Header.module.sass'\r\n\r\nexport default props=> (\r\n\t<header className= {classes.Header}>\r\n\t\t<h1> \r\n            Веб-аналитика по сайтам\r\n        </h1> \r\n\t</header>\t\r\n)\r\n","import React from 'react'\r\nimport classes from './MainContent.module.sass'\r\n\r\nexport default (props)=>\r\n<div className= { classes.MainContent }>\r\n\t{ props.children }\r\n</div>\r\n\r\n","export const host= 'http://laravel-api.loc'","//Fetch\r\n\r\nexport const SUCCESS= 'SUCCESS_sitesList'\r\n\r\nexport const ERROR= 'ERROR_sitesList'\r\n\r\nexport const LOADING= 'LOADING_sitesList'\r\n\r\n","import Fetch_get from '../../my_js_functions/requests/fetch_get_redux'\r\nimport { SUCCESS, LOADING, ERROR } from './actionTypes'\r\n\r\n//Fetch------------------------------------------------\r\n\r\nexport function fetchGetData(url) {\r\n\t\r\n\treturn dispatch => Fetch_get(CreateFetchParams(url, dispatch))\r\n}\r\n\r\nfunction CreateFetchParams(url, dispatch) {\r\n\r\n\treturn {\r\n\t\turl: url,\r\n\t\thandleSuccess: HandleSuccess,\r\n\t\thandleError: HandleError,\r\n\t\thandleLoading: HandleLoading,\r\n\t\tdispatch: dispatch\r\n\t}\r\n\r\n}\r\n\r\nfunction HandleSuccess(result) {\r\n\t\r\n\treturn ({ type: SUCCESS, payload: result})\r\n\r\n}//function\r\n\r\n function HandleError(error) {\r\n\t\r\n\treturn result => ({ type: ERROR, payload: error})\r\n\r\n}\r\n\r\nfunction HandleLoading() {\r\n\t\r\n\treturn { type: LOADING }\r\n\r\n}//function","import {host} from '../app_consts'\n\nexport default \nfunction Fetch_get(params) {\n\n\tconst \n\t\turl= host +'/api'+ params.url,\n\t\tdispatch= params.dispatch\n\n\tdispatch(params.handleLoading())\t\t\n\t\t\n\tfetch(url)\n\t\t\n\t \t.then( res => res.json() )\n\n\t\t.then( \n\t\t  result => dispatch(params.handleSuccess(result.json_response)),\n\t\t  error => dispatch(params.handleError(error)), \n\t\t)\n\n}//function","import React from 'react'\r\nimport GetDataRequest from 'containers/GetDataRequestRedux'\r\n\r\nexport default SitesList =>\r\n\r\n() =>\r\n\r\n<GetDataRequest \r\n\turl= '/get-sites-list'\r\n\r\n\trender= { \r\n\t\t( serverData ) =>\r\n\t\t\t<SitesList sitesList= { serverData }/>}\r\n/>","import React, {Component} from 'react'\r\n\r\nimport {connect} from 'react-redux'\r\nimport { fetchGetData } from '../redux/getRequest/actions'\r\n\r\nclass GetDataRequest extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tthis.props.fetchGetData(this.props.url)\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { error, loading, serverData } = this.props\r\n\t\tif(error) {\r\n\t\t\t\r\n\t\t\treturn <div>Ошибка: {error.message}</div>\r\n\t\t}\r\n\r\n\t\tif(loading) {\r\n\t\t\treturn <div>loading..</div>\r\n\t\t}\r\n\r\n\t\tif(serverData)  \r\n\t\t  return this.props.render( serverData )\r\n\t\telse return null\r\n\t}\t\r\n}\r\n\r\nexport default\r\nconnect( \r\n\r\n\t(state) => ({ \r\n\t\t\tserverData: state.getRequest.serverData,\r\n\t\t  \terror: state.getRequest.error,\r\n\t\t  \tloading: state.getRequest.loading }), \r\n\r\n\tdispatch => ({ \r\n\r\n\t\tfetchGetData: url => dispatch(fetchGetData(url))\r\n\r\n\t})\r\n)\r\n(GetDataRequest)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport classes from './SiteItem.module.sass'\r\n\r\nexport default ({siteName, siteId})=>\r\n\r\n<li className= { classes.SiteItem }>\r\n\t<Link to={'/site/' + siteId} > { siteName } </Link>\r\n</li>\r\n","import WithGetSites from './WithGetSites'\r\nimport SitesList from '../components/SitesList/SitesList'\r\n\r\nexport default WithGetSites(SitesList)","import React from 'react';\r\nimport classes from './SitesList.module.sass'\r\nimport SiteItem from './SiteItem/SiteItem'\r\n\r\nexport default ({ sitesList })=>\r\n\r\n<ul className= {classes.SitesList}>\r\n{\r\n\tsitesList.map( siteItem=>{\r\n\t\treturn(\r\n\t\t\t<SiteItem\r\n\t\t\t\tkey= {siteItem.id}\r\n\t\t\t\tsiteName= {siteItem.url}\r\n\t\t\t\tsiteId= {siteItem.id}\r\n\t\t\t/>)\r\n\t})\r\n}\r\n</ul>\r\n","import fetch_params_post from './fetch_params_post'\nimport {host} from '../app_consts'\n\nexport default \nfunction Fetch_post(params) {\n\n\tconst \n\t\tfetchParams= fetch_params_post(params.data),\n\t\turl= host +'/api' + params.url,\n\t\tdispatch= params.dispatch\n\n\tdispatch(params.handleLoading())\t\n\t\t\n\tfetch( url, fetchParams)\n\n\t    .then( res => res.json() )\n\n\t\t.then( \n\t\t\t\n\t\t\tresult=> dispatch(params.handleSuccess(result.json_response)),\n       \n        \terror => dispatch(params.handleError(error)), \n  \t\t)\n\n}\n\n","export default \nfunction Create_fetch_params(Data){\n\n\treturn {\n\t\t\tmethod: 'post',\n\t\t\tcredentials: \"same-origin\",\n\t\t\tbody: JSON.stringify(Data),\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\"Accept\": \"application/json, text-plain, */*\",\n\t\t\t\t\"X-Requested-With\": \"XMLHttpRequest\",\n\t\t\t}//headers\n\t}//return\t\n\n}//function\n\n","import Fetch_post from '../../my_js_functions/requests/fetch_post_redux'\r\nimport { SUCCESS, LOADING, ERROR } from './actionTypes'\r\n\r\n//Fetch------------------------------------------------\r\n\r\nexport function fetchPostData(url,data) {\r\n\r\n\tconsole.log('fetchPostData', data)\r\n\r\n\treturn dispatch =>Fetch_post(CreateFetchParams(url, data, dispatch))\r\n\r\n}\r\n\r\nfunction CreateFetchParams(url, data, dispatch) {\r\n\r\n\treturn {\r\n\t\turl: url,\r\n\t\tdata : data,\r\n\t\thandleSuccess: HandleSuccess,\r\n\t\thandleError: HandleError,\r\n\t\thandleLoading: HandleLoading,\r\n\t\tdispatch: dispatch\r\n\t}\r\n\r\n}//CreateFetchParams\r\n\r\nfunction HandleSuccess(result) {\r\n\t\r\n\treturn ({ type: SUCCESS, payload: result})\r\n\r\n}//function\r\n\r\n function HandleError(error) {\r\n\t\r\n\treturn result => ({ type: ERROR, payload: error})\r\n\r\n}//function\r\n\r\nfunction HandleLoading() {\r\n\t\r\n\treturn { type: LOADING }\r\n\r\n}//function","//Fetch\r\n\r\nexport const SUCCESS= 'SUCCESS'\r\n\r\nexport const ERROR= 'ERROR'\r\n\r\nexport const LOADING= 'LOADING'\r\n\r\n","import React from 'react'\r\nimport PostDataRequest from 'containers/PostDataRequestRedux'\r\n\r\nexport default ClicksInfo =>\r\n\r\nprops =>\r\n\r\n<PostDataRequest \r\n\turl= '/get-clicks-info'\r\n\tdata= { { siteId: props.match.params.id } }\r\n\trender= { \r\n\t\t( serverData ) =>\r\n\t\t\t<ClicksInfo \r\n\t\t\t\tclicksInfo= { serverData }\r\n\t\t\t/>}\r\n/>","import React, {Component} from 'react'\r\n\r\nimport {connect} from 'react-redux'\r\nimport { fetchPostData } from '../redux/postRequest/actions'\r\n\r\nclass PostDataRequest extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tconst { url, data }= this.props\r\n\t\tthis.props.fetchPostData(url, data)\r\n\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { error, loading, serverData, render } = this.props\r\n\r\n\t\tif(error) {\r\n\t\t\t\r\n\t\t\treturn <div>Ошибка: {error.message}</div>\r\n\t\t}\r\n\r\n\t\tif(loading) {\r\n\t\t\treturn <div>loading..</div>\r\n\t\t}\r\n\r\n\t\tif(serverData) {\r\n\t\t\t\r\n\t\t  \treturn render( serverData )\r\n\t\t} \r\n\t\telse return null\r\n\t}\t\r\n}\r\n\r\nexport default\r\n\r\nconnect( \r\n\r\n\t(state) =>({ \r\n\t\tserverData: state.postRequest.serverData,\r\n\t  \terror: state.postRequest.error,\r\n\t  \tloading: state.postRequest.loading }),\r\n\t  \t \r\n\tdispatch => ({ \r\n\r\n\t\tfetchPostData: (url, data) => dispatch(fetchPostData(url, data))\r\n\r\n\t})\r\n)\r\n(PostDataRequest)","import React from 'react'\r\nimport classes from './Hour.module.sass'\r\n\r\nexport default ({ hour, amount })=>\r\n<div className= { classes.Hour }>\r\n\r\n\t{ hour } кликов { amount }\r\n\r\n</div>\r\n\r\n","import React from 'react'\r\nimport classes from './Day.module.sass'\r\nimport Hour from '../Hour/Hour'\r\n\r\nexport default ({ hoursClicksInfo, day })=>\r\n<div className= { classes.Day }>\r\n\t\r\n\tчисло { day }\r\n\r\n\t<div>часы:</div>\r\n\r\n\t{ Object.keys(hoursClicksInfo).map((hour,index)=> {\r\n\r\n\t\treturn(\r\n\t\t\t<Hour \r\n\t\t\t\tkey= {index}\r\n\t\t\t\thour= { hour }\r\n\t\t\t\tamount= { hoursClicksInfo[hour] }\r\n\t\t\t/>)\r\n\t})}\r\n\r\n</div>\r\n\r\n","import React from 'react'\r\nimport classes from './Month.module.sass'\r\nimport Day from '../Day/Day'\r\n\r\nexport default ({ daysClicksInfo, month })=>\r\n<div className= { classes.Month }>\r\n\tМесяц { month }\r\n\r\n\t{ Object.keys(daysClicksInfo).map((day,index)=> {\r\n\r\n\t\treturn(\r\n\t\t\t<Day \r\n\t\t\t\tkey= {index}\r\n\t\t\t\tday= { day }\r\n\t\t\t\thoursClicksInfo= { daysClicksInfo[day] }\r\n\t\t\t/>)\r\n\t})}\r\n</div>\r\n\r\n","import React from 'react'\r\nimport classes from './Year.module.sass'\r\nimport Month from '../Month/Month'\r\n\r\nexport default ({ monthsClicksInfo, year })=>\r\n<div className= { classes.Year }>\r\n\tГод {year}\r\n\r\n\t{ Object.keys(monthsClicksInfo).map((month,index)=> {\r\n\r\n\t\treturn(\r\n\t\t\t<Month \r\n\t\t\t\tkey= {index}\r\n\t\t\t\tmonth= { month }\r\n\t\t\t\tdaysClicksInfo= { monthsClicksInfo[month] }\r\n\t\t\t/>)\r\n\t})}\r\n\r\n</div>\r\n\r\n","import WithPostClicks from './WithPostClicks'\r\nimport ClicksInfo from '../components/ClicksInfo/ClicksInfo'\r\n\r\nexport default WithPostClicks(ClicksInfo)","import React from 'react'\r\nimport classes from './ClicksInfo.module.sass'\r\nimport Year from './Year/Year'\r\n\r\nexport default ({ clicksInfo })=>\r\n<div className= { classes.ClicksInfo }>\r\n\t{ Object.keys(clicksInfo).map((year,index)=> { \r\n\r\n\t\treturn(\r\n\t\t\t<Year \r\n\t\t\t\tkey= {index}\r\n\t\t\t\tyear= { year }\r\n\t\t\t\tmonthsClicksInfo= { clicksInfo[year] }\r\n\t\t\t/>)\r\n\t})}\r\n</div>\r\n\r\n","import React from 'react';\r\n\r\nexport default props=> (\r\n\t<div>\r\n\t\t{console.log(props)}\r\n\t\ttest\r\n\t</div>\r\n)\r\n","import React from 'react'\r\nimport MainContent from '../components/MainContent/MainContent'\r\nimport SitesList from './SitesList'\r\nimport ClicksInfo from './ClicksInfo'\r\nimport Test from '../components/Test/Test'\r\nimport { Route, Switch } from 'react-router-dom'\r\n\r\nexport default ()=>\r\n<MainContent>\r\n\t<Switch>\r\n\t\t<Route path=\"/site/:id\" component={ ClicksInfo } />\r\n\t\t<Route path=\"/test\" component={ Test } />\r\n\t\t<Route path=\"/\" component={ SitesList } />\r\n\t</Switch>\t\r\n</MainContent>\r\n\r\n","export default ({ children })=> children\r\n","import React from 'react'\r\n\r\nimport Header from '../../components/Header/Header'\r\nimport MainContent from '../MainContent'\r\nimport Auxiliary from '../Services/Auxiliary'\r\n\r\nexport default () =>\r\n\t\r\n<Auxiliary>\r\n\t<Header/>\r\n\t<MainContent/>\r\n</Auxiliary>\r\n\r\n\t\t\t\t\r\n\t","import { SUCCESS, ERROR, LOADING } from './actionTypes'\r\n\r\nconst initialState= {\r\n\terror:    false,\r\n    loading: false,\r\n    serverData: []\r\n}\r\n\r\nexport default (state= initialState, action) => {\r\n\r\n\tswitch(action.type) {\r\n\r\n\t\tcase ERROR:\r\n\t\t\treturn {\r\n\t\t\t\tserverData: [],\r\n\t\t\t\terror: true,\r\n\t\t\t\tloading: false\r\n\t\t\t}\r\n\r\n\t\tcase LOADING:\r\n\r\n\t\t\treturn {\r\n\t\t\t\tserverData: [],\r\n\t\t\t\terror: false,\r\n\t\t\t\tloading: true\r\n\t\t\t}\r\n\t\t\r\n\t\tcase SUCCESS:\r\n\t\r\n\t\t\treturn { \r\n\t\t\t\tserverData: action.payload, \r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: null \r\n\t\t\t}\r\n\r\n\t\tdefault: return state\t\r\n\t}\r\n}","import { SUCCESS, ERROR, LOADING } from './actionTypes'\r\n\r\nconst initialState= {\r\n\terror:    false,\r\n    loading: false,\r\n    serverData: []\r\n}\r\n\r\nexport default (state= initialState, action) => {\r\n\r\n\tswitch(action.type) {\r\n\r\n\t\tcase ERROR:\r\n\t\t\treturn {\r\n\t\t\t\tserverData: [],\r\n\t\t\t\terror: true,\r\n\t\t\t\tloading: false\r\n\t\t\t}\r\n\r\n\t\tcase LOADING:\r\n\r\n\t\t\treturn {\r\n\t\t\t\tserverData: [],\r\n\t\t\t\terror: false,\r\n\t\t\t\tloading: true\r\n\t\t\t}\r\n\t\t\r\n\t\tcase SUCCESS:\r\n\t\r\n\t\t\treturn { \r\n\t\t\t\tserverData: action.payload, \r\n\t\t\t\tloading: false,\r\n\t\t\t\terror: null \r\n\t\t\t}\r\n\r\n\t\tdefault: return state\t\r\n\t}\r\n}","import { combineReducers } from 'redux'\r\nimport getRequest from './getRequest/reducer'\r\nimport postRequest from './postRequest/reducer'\r\n\r\nexport default combineReducers({getRequest, postRequest})","import React from 'react'\r\nimport Layout from './hoc/Layout/Layout'\r\nimport {Provider} from 'react-redux'\r\nimport rootReducer from './redux/rootReducer'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport './reset.sass'\r\n\r\nconst store= createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport default () =>\r\n\r\n<Provider store= {store}>\r\n\t<Layout/>\r\n</Provider>\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css'\n\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst application = (\n\t<BrowserRouter>\n\t\t<App/>\n\t</BrowserRouter>\n)\n\nReactDOM.render(\n   application,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}